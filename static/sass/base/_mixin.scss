// ==========================================================================
//  GLOBAL Mixins
// ==========================================================================



 // * Convert font-size from px to rem
 // *
 // * @param $size - the value in pixel you want to convert
 // *
 // * e.g. p {@include fontSize(12px);}
 // * 

// Function for converting a px based font-size to rem.
// @function calculateRem($size,$line-height: 0) {
//   $remSize: $size / 16px;
// //Default font size on html element is 100%, equivalent to 16px;
//  @if ($line-height > 0) {
//  	$remSize: $line-height / 16px;
//  }
//   @return #{$remSize}rem;
// }

// // Mixin that will calculate rem value.
// @mixin fontSize($size,$line-height) {
//   font-size: calculateRem($size);
//   line-height: calculateRem($line-height);
// }

@mixin font-rem($font-size, $line-height: 0) {
  font-size: ($font-size / $baseFontSize) * 1rem;
  @if ($line-height > 0) {
    line-height: ($line-height / $baseFontSize) * 1rem;
  }
}



 // * SASS color map function
 // *
 // * using the function to get an non-map color
 // *
 // * e.g. body {background-color: color(background)};
 // * 
 // * using the function to get a nested map color
 // *
 // * h1{color: color(primary, base);}
 // *
 
// retrieve color from $colors map ie. `color(base, primary)`

@function color($color-name, $color-variant:null) {
  // color variant is optional
  @if ($color-variant != null) {
    // map inception
    @return map-get(map-get($colors, $color-name), $color-variant);
  } @else {
    @return map-get($colors, $color-name);
  }
}



// Media query mixin
@mixin bp($query) {
  @if $query == desktop-lg {
    @media (min-width: 1500px) { @content; }
  }
  @else if $query == desktop-md {
    @media (min-width: 1200px) { @content; }
  }
  @else if $query == tablet-md {
    @media (min-width: 992px) { @content; }
  }
  @else if $query == tablet-sm {
    @media (max-width: 991px) { @content; }
  }
  @else if $query == tablet-strict {
    @media (min-width: 768px) and (max-width: 991px)  { @content; }
  }
  @else if $query == tablet {
    @media (min-width: 768px) { @content; }
  }
  @else if $query == mobile {
    @media (max-width: 767px)  { @content; }
  }
  @else if $query == xs {
    @media (max-width: 320px)  { @content; }
  }
}



// Input placeholder mixin

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// input,  
// textarea {  
//     @include input-placeholder {
//         color: $grey;
//     }
// }


// IE Mixins

@mixin ie-11 {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

@mixin ie-edge {
  @supports (-ms-ime-align: auto) {
    @content;
  }
}

@mixin moz {
  @-moz-document url-prefix() {
    @content;
  }
}

